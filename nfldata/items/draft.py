""" Defines items related to the NFL draft."""
from enum import Enum, auto
import scrapy


class DraftType(Enum):
    """The different types of drafts that are held."""

    NORMAL = auto()
    SUPPLEMENTAL = auto()


class DraftPick(scrapy.Item):  # pylint: disable=too-many-ancestors
    """
    Defines a single draft pick in a particular NFL draft.
    """

    # The year in which the draft itself occurred.
    year = scrapy.Field()

    # Whether the pick was made in a normal draft or supplemental draft. The
    # value follows the integer value of the DraftType enum.
    draft_type = scrapy.Field()

    draft_round = scrapy.Field()

    # The pick number relative to the entire draft, not the round.
    draft_pick = scrapy.Field()

    # A relative link on Pro Football Reference to the franchise that made the pick.
    franchise = scrapy.Field()

    # A relative link on Pro Football Reference to the player that was drafted.
    # If there is no page for this player, this field will just contain their
    # name.
    player = scrapy.Field()

    # The age of the player when they were drafted. This field will be None if
    # this information is not available.
    age = scrapy.Field()

    position = scrapy.Field()

    first_team_all_pros = scrapy.Field()

    pro_bowls = scrapy.Field()

    # The career weighted Approximate Value generated by this player.
    career_approx_value = scrapy.Field()

    # The Approximate Value accumulated for the team that drafted this player.
    draft_approx_value = scrapy.Field()

    # A relative link on Pro Football Reference to the college that the player
    # was from. None of this information is not available.
    college = scrapy.Field()

    @staticmethod
    def sql_create(database):
        """
        Creates the draft_picks table if one does not exist in the given database.
        Note that this does not update the fields if the table already exists,
        but the fields are outdated.
        """
        database.execute('''
            CREATE TABLE IF NOT EXISTS draft_picks (
                year INTEGER,
                draft_type TEXT,
                draft_round INTEGER,
                draft_pick INTEGER,
                franchise TEXT,
                player TEXT,
                age INTEGER,
                first_team_all_pros INTEGER,
                pro_bowls INTEGER,
                career_approx_value INTEGER,
                draft_approx_value INTEGER,
                college TEXT,
                PRIMARY KEY (year, draft_type, draft_pick)
                FOREIGN KEY (franchise) REFERENCES franchises(franchise)
                FOREIGN KEY (player) REFERENCES players(player)
                FOREIGN KEY (college) REFERENCES schools(school)
                FOREIGN KEY (franchise, year) REFERENCES teams(franchise, year)
            )
        ''')

    def sql_insert(self, database):
        """
        Insert this draft pick into the draft_picks table in the given database.
        """
        database.execute(
            '''
            INSERT OR REPLACE INTO draft_picks (
                year,
                draft_type,
                draft_round,
                draft_pick,
                franchise,
                player,
                age,
                first_team_all_pros,
                pro_bowls,
                career_approx_value,
                draft_approx_value,
                college
            ) VALUES (
                ?,
                ?,
                ?,
                ?,
                ?,
                ?,
                ?,
                ?,
                ?,
                ?,
                ?,
                ?
            )
        ''', (self['year'], self['draft_type'].name, self['draft_round'],
              self['draft_pick'], self['franchise'], self['player'],
              self['age'], self['first_team_all_pros'], self['pro_bowls'],
              self['career_approx_value'], self['draft_approx_value'],
              self['college']))
